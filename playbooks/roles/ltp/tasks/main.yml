---
- name: Import optional extra_args file
  ansible.builtin.include_vars:
    file: "{{ item }}"
  with_first_found:
    - files:
        - "{{ kdevops_extra_vars_yml }}"
        - "{{ kdevops_extra_vars_yaml }}"
        - "{{ kdevops_extra_vars_json }}"
      skip: true
  failed_when: false
  tags: vars

- name: Set up the /data mount point
  tags: ['data_partition']
  ansible.builtin.include_role:
    name: create_data_partition

- name: Set the pathname of the results directory on the control node
  tags: ['vars']
  ansible.builtin.set_fact:
    ltp_test_group: "{{ ansible_host | regex_replace(kdevops_host_prefix + '-') | regex_replace('-dev') }}"
    ltp_results_dir: "../workflows/ltp/results/{{ ansible_kernel }}"

- name: Create the local results directory
  tags: ['first_run']
  ansible.builtin.file:
    path: "{{ ltp_results_dir }}"
    state: directory
    mode: "u=rwx,g=rx,o=rx"
  delegate_to: localhost
  run_once: true

- name: Set OS-specific variables
  ansible.builtin.include_vars: "{{ lookup('ansible.builtin.first_found', params) }}"
  vars:
    params:
      files:
        - '{{ ansible_distribution }}.yml'
        - '{{ ansible_os_family }}.yml'
        - default.yml
      paths:
        - 'vars'

- name: Install dependencies for ltp
  tags: ['build', 'ltp']
  become: true
  become_flags: 'su - -c'
  become_method: ansible.builtin.sudo
  ansible.builtin.package:
    name: "{{ ltp_packages }}"
    state: present

- name: Set the pathname of the build directory
  tags: ['build', 'ltp']
  ansible.builtin.set_fact:
    ltp_build_dir: "{{ data_path }}/ltp"

- name: Remove existing ltp build directory
  tags: ['build', 'ltp']
  become: true
  become_flags: 'su - -c'
  become_method: ansible.builtin.sudo
  ansible.builtin.file:
    path: "{{ ltp_build_dir }}"
    state: absent

- name: Shallow-clone the ltp source code from {{ ltp_repo }}
  tags: ['build', 'clone', 'git', 'ltp']
  ansible.builtin.git:
    repo: "{{ ltp_repo }}"
    dest: "{{ ltp_build_dir }}"
    version: "{{ ltp_repo_commit }}"
    update: true
    depth: 1
  retries: 3
  delay: 5
  register: result
  until: not result.failed
  when:
    - kdevops_workflows_dedicated_workflow|bool

- name: Clone the full ltp source code tree from {{ ltp_repo }}
  tags: ['build', 'clone', 'git', 'ltp']
  ansible.builtin.git:
    repo: "{{ ltp_repo }}"
    dest: "{{ ltp_build_dir }}"
    version: "{{ ltp_repo_commit }}"
    update: true
  retries: 3
  delay: 5
  register: result
  until: not result.failed
  when:
    - not kdevops_workflows_dedicated_workflow|bool

- name: Initialize autotools in the build directory
  tags: ['build', 'ltp']
  community.general.make:
    chdir: "{{ ltp_build_dir }}"
    target: autotools

- name: Configure the ltp build environment
  tags: ['build', 'ltp']
  ansible.builtin.command:
    cmd: "./configure"
    chdir: "{{ ltp_build_dir }}"
    creates: include/config.h

- name: Build ltp from source
  tags: ['build', 'ltp']
  community.general.make:
    chdir: "{{ ltp_build_dir }}"
    target: all
    jobs: "{{ ansible_processor_nproc }}"

- name: Ensure /opt has correct permissions
  tags: ['ltp']
  become: true
  become_flags: 'su - -c'
  become_method: ansible.builtin.sudo
  ansible.builtin.file:
    state: directory
    path: "/opt"
    mode: "u=rwx,g=rwx,o=rwxt"

- name: Install ltp on the test systems
  tags: ['ltp']
  community.general.make:
    chdir: "{{ ltp_build_dir }}"
    target: install
    jobs: "{{ ansible_processor_nproc }}"

- name: Start the rpcbind service
  tags: ['ltp']
  become: true
  become_flags: 'su - -c'
  become_method: ansible.builtin.sudo
  ansible.builtin.systemd_service:
    name: rpcbind.service
    state: started
    enabled: true

- name: Generate /etc/nfs.conf
  tags: ['ltp']
  become: true
  become_flags: 'su - -c'
  become_method: ansible.builtin.sudo
  ansible.builtin.template:
    src: nfs.conf.j2
    dest: /etc/nfs.conf
    owner: root
    group: root
    mode: "u=rw,g=r,o=r"

- name: Start the NFSD service
  tags: ['ltp']
  become: true
  become_flags: 'su - -c'
  become_method: ansible.builtin.sudo
  ansible.builtin.systemd_service:
    name: nfs-server.service
    state: reloaded
    enabled: true

- name: Run ltp
  tags: ['run_tests']
  become: true
  become_flags: 'su - -c'
  become_method: ansible.builtin.sudo
  environment:
    CREATE_ENTRIES: 1
  ansible.builtin.command:
    cmd: "/opt/ltp/runltp {{ ltp_runltp_arg_dict[ltp_test_group] }}"
  changed_when: true
  failed_when: false

- name: Look for test results in target node's /opt/ltp/results
  tags: ['copy_results']
  become: true
  become_flags: 'su - -c'
  become_method: ansible.builtin.sudo
  ansible.builtin.find:
    paths: "/opt/ltp/results/"
  register: results_files

- name: Copy test results to the control node
  tags: ['copy_results']
  ansible.builtin.fetch:
    src: "{{ item.path }}"
    dest: "{{ ltp_results_dir }}/{{ ltp_test_group }}/"
    flat: true
    validate_checksum: false
  with_items: "{{ results_files.files }}"
  when:
    - results_files.matched > 0
  loop_control:
    label: "Copying {{ item.path | basename }} ..."

- name: Look for test output in target node's /opt/ltp/output
  tags: ['copy_results']
  become: true
  become_flags: 'su - -c'
  become_method: ansible.builtin.sudo
  ansible.builtin.find:
    paths: "/opt/ltp/output/"
  register: output_files

- name: Copy test output to the control node
  tags: ['copy_results']
  ansible.builtin.fetch:
    src: "{{ item.path }}"
    dest: "{{ ltp_results_dir }}/{{ ltp_test_group }}/"
    flat: true
    validate_checksum: false
  with_items: "{{ output_files.files }}"
  when:
    - output_files.matched > 0
  loop_control:
    label: "Copying {{ item.path | basename }} ..."

---
- name: Import optional extra_args file
  include_vars: "{{ item }}"
  ignore_errors: yes
  with_first_found:
    - files:
      - "{{ kdevops_extra_vars_yml }}"
      - "{{ kdevops_extra_vars_yaml }}"
      - "{{ kdevops_extra_vars_json }}"
      skip: true
  tags: vars

# Distro specific
# Note: if using 9p we'll install the selftests dependencies on both
# the target node and the localhost because we first need to build
# the target selftests for the nodes and then actually use them.
- name: Install dependencies
  include_tasks: tasks/install-deps/main.yml

- name: Install dependencies to build Linux selftests on host
  tags: [ 'deps' ]
  run_once: true
  local_action: import_tasks install-deps/main.yml
  when:
    - bootlinux_9p|bool

- name: Remove /lib/udev/rules.d/50-firmware.rules
  tags: [ 'selftests', 'deps' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  file:
    path: "/lib/udev/rules.d/50-firmware.rules"
    state: absent
  when:
    - selftests_section_firmware|bool

- include_role:
    name: create_data_partition
  tags: [ 'data_partition' ]

- name: Get nproc
  command: "{{ num_jobs }}"
  tags: [ 'selftests', 'build' ]
  register: nproc

- name: Get nproc on host
  command: "{{ num_jobs }}"
  tags: [ 'selftests', 'build' ]
  register: nproc_host
  when:
    - bootlinux_9p|bool

- name: Set the target selftest
  set_fact:
    target_selftest: "{{ ansible_host | regex_replace('selftests-') | regex_replace(kdevops_host_prefix + '-') | regex_replace('-dev') | regex_replace('-', '_') }}"
    all_selftest_targets: "{{ play_hosts | join(' ') | regex_replace('selftests-') | regex_replace(kdevops_host_prefix + '-') | regex_replace('-dev') | regex_replace('-', '_') }}"
  tags: [ 'selftests', 'vars' ]

# We split building selftestss for two reasons because we can have the Linux
# build out of the node / guest
#
# So there are two steps to installing selftests:
# 1) building selftests
# 2) installing built selftests
- name: Build selftests
  tags: [ 'selftests', 'build' ]
  make:
    chdir: "{{ selftests_data }}"
    jobs: "{{ nproc.stdout }}"
    params:
      TARGETS: "{{ target_selftest }}"
      FORCE_TARGETS: "1"
  when:
    - not bootlinux_9p|bool

# We build only what we need. This means if building on the host we peg all
# the targets we want together so we can build all of them.
# We use FORCE_TARGETS=1 so to ensure make will fail if a build target failed.
#
# Note that some targets will not fail with an error if dependencies are not
# met.. so you should ensure that build-deps are met before adding a new target
- name: Build selftests on host
  tags: [ 'selftests', 'build' ]
  make:
    chdir: "{{ selftests_data_9p }}"
    jobs: "{{ nproc_host.stdout }}"
    params:
      TARGETS: "{{ all_selftest_targets }}"
      FORCE_TARGETS: "1"
  run_once: true
  delegate_to: localhost
  when:
    - bootlinux_9p|bool

# We use the target node only, not the host as if you've enaabled
# 9p the path will be available and everything will have been built
# for us.
- name: Install selftests
  tags: [ 'selftests', 'build' ]
  become: yes
  become_method: sudo
  become_flags: 'su - -c'
  make:
    chdir: "{{ selftests_data }}"
    jobs: "{{ nproc.stdout }}"
    target: install
    params:
      O: "{{ selftests_data_target }}"
      TARGETS: "{{ target_selftest }}"

- name: Reboot system before our test so we know everything is sane
  tags: [ 'selftests', 'run_tests', 'reboot' ]
  become: yes
  become_method: sudo
  reboot:
    post_reboot_delay: 10
  when:
    - not selftests_skip_reboot|bool

- name: Set the path to selftests workflow
  set_fact:
    selftests_workflow_target: "../workflows/selftests/"
  tags: [ 'selftests', 'run_tests', 'copy_results', 'prior_run', 'print_results' , 'augment_expunge_list' ]

- name: Get used target kernel version
  tags: [ 'selftests', 'vars', 'copy_results', 'augment_expunge_list' ]
  command: "uname -r"
  register: uname_cmd

- name: Store last kernel variable
  set_fact:
    last_kernel: "{{ uname_cmd.stdout_lines | regex_replace('\\]') | regex_replace('\\[') | replace(\"'\",'') }}"
  tags: [ 'selftests', 'vars', 'copy_results', 'augment_expunge_list' ]
  run_once: true

- name: Set the path where we collect our selftests results
  set_fact:
    selftests_results_full_path: "{{ topdir_path }}/workflows/selftests/results/"
    selftests_workflow_dir: "../workflows/selftests"
    selftests_results_target: "../workflows/selftests/results/last-run/{{ last_kernel }}"
  tags: [ 'selftests', 'run_tests', 'copy_results', 'prior_run', 'print_results' , 'augment_expunge_list' ]

- name: Print uname for each host
  tags: [ 'selftests', 'run_tests' ]
  debug: var=ansible_kernel

- name: Load configfs module
  tags: [ 'selftests', 'run_tests', 'configfs' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  command: "modprobe configfs"
  when:
    - kdevops_run_selftests|bool

- name: Clear out old results directory on target hosts
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  file:
    state: absent
    path: "{{ selftests_data_target }}/results/"
  tags: [ 'selftests', 'run_tests', 'clean_results' ]

- name: Hint to watchdog tests are about to kick off
  local_action: file path="{{ selftests_workflow_target }}/.begin" state=touch
  tags: [ 'selftests', 'run_tests' ]
  when:
    - kdevops_run_selftests|bool
  run_once: true

- name: Enable low-level messages on console
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  command: sysctl kernel.printk="8 8 1 7"

- name: Stop selftests if we're debbugging
  ansible.builtin.meta: end_play
  tags: [ 'selftests', 'run_tests', 'vars'  ]
  when:
    - selftests_skip_run|bool

- name: Run selftests
  tags: [ 'selftests', 'run_tests' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  command: "./run_kselftest.sh -s"
  args:
    chdir: "{{ selftests_workdir }}"
  register: selftests_out
  when:
    - kdevops_run_selftests|bool

- name: Remove watchdog hint that tests have started
  local_action: file path="{{ selftests_workflow_target }}/.begin" state=absent
  tags: [ 'selftests', 'run_tests' ]
  when:
    - kdevops_run_selftests|bool
  run_once: true

- name: Clean up our localhost results/last-run directory
  local_action: file path="{{ selftests_results_target }}/{{ item }}" state=absent
  with_items:
    - "last-run"
  loop_control:
    label: "{{ item }}"
  run_once: true
  tags: [ 'selftests', 'copy_results', 'clean_local_results' ]

- name: Create empty last-run directory
  local_action: file path="{{ selftests_results_target }}/" state=directory
  run_once: true
  tags: [ 'selftests', 'copy_results', 'clean_local_results' ]

- name: Document used target kernel version
  local_action: "shell echo {{ last_kernel }} > {{ selftests_results_target }}/last-kernel.txt"
  tags: [ 'selftests', 'copy_results', 'augment_expunge_list' ]
  run_once: true

- name: Save selftest TAP output
  tags: [ 'selftests', 'run_tests' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  copy:
    content: "{{ selftests_out.stdout_lines|join('\n') }}"
    dest: "{{ selftests_workdir}}/tap.log"

- name: Look for the output.log and sefltest tap output files on {{ selftests_workdir }}
  tags: [ 'selftests', 'copy_results' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  find:
    paths: "{{ selftests_workdir }}"
    recurse: yes
    patterns:
      - "output.log"
      - "kselftest-list.txt"
      - "tap.log"
  register: output_log_files

- name: Copy the output files from {{ selftests_workdir }}
  tags: [ 'selftests', 'copy_results' ]
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  vars:
    item_with_target: "{{ target_selftest }}.{{ item.path | basename }}"
  fetch:
    src: "{{ item.path }}"
    dest: "{{ selftests_results_target }}/{{ item_with_target }}"
    flat: yes
  with_items: "{{ output_log_files.files }}"
  loop_control:
    label: "Copying {{ item_with_target }} ..."
  when:
    - output_log_files.matched > 0
